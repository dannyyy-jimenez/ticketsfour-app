{"version":3,"sources":["ReactNativeZoomableView.tsx"],"names":["React","Component","createRef","Animated","InteractionManager","PanResponder","StyleSheet","View","AnimatedTouchFeedback","DebugTouchPoint","calcGestureCenterPoint","calcGestureTouchDistance","calcNewScaledOffsetForZoomCentering","applyPanBoundariesToOffset","getBoundaryCrossedAnim","getPanMomentumDecayAnim","getZoomToAnimation","initialState","originalWidth","originalHeight","originalPageX","originalPageY","ReactNativeZoomableView","constructor","props","ValueXY","x","y","Value","value","boundaryCrossedAnimInEffect","runAfterInteractions","setTimeout","zoomSubjectWrapperRef","current","measureInWindow","width","height","setState","e","gestureState","onStartShouldSetPanResponder","_getZoomableViewEventObject","onLongPress","longPressTimeout","longPressDuration","onPanResponderGrant","panAnim","stopAnimation","zoomAnim","gestureStarted","gestureType","_resolveAndHandleTap","debugPoints","lastGestureCenterPosition","panEnabled","disablePanOnInitialZoom","zoomLevel","initialZoom","vx","vy","start","clearTimeout","onPanResponderEnd","onZoomEnd","onShiftingEnd","onPanResponderMove","numberActiveTouches","_handlePanResponderGrant","_handlePanResponderEnd","lastGestureTouchDistance","_handlePinching","Math","abs","dx","dy","isShiftGesture","_handleShifting","now","Date","doubleTapFirstTapReleaseTimestamp","doubleTapDelay","_addTouch","doubleTapFirstTap","id","toString","isSecondTap","singleTapTimeoutId","_handleDoubleTap","nativeEvent","pageX","state","pageY","persist","onSingleTap","gestureHandlers","create","_handleStartShouldSetPanResponder","_handlePanResponderMove","onPanResponderRelease","onPanResponderTerminate","evt","onPanResponderTerminationRequest","onShouldBlockNativeResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponderCapture","zoomAnimatedValue","panAnimatedValueXY","offsetX","initialOffsetX","offsetY","initialOffsetY","setValue","addListener","__setOffset","__getOffset","axis","offset","offsetState","__offsets","animValue","bindToBorders","containerSize","contentSize","contentWidth","contentHeight","boundOffset","panBoundaryPadding","boundariesApplied","toFixed","componentDidUpdate","prevProps","prevState","zoomEnabled","onTransformInvocationInitialized","_invokeOnTransform","successful","currState","originalMeasurementsChanged","componentDidMount","grabZoomSubjectOriginalMeasurements","measureZoomSubjectInterval","setInterval","componentWillUnmount","clearInterval","zoomableViewEvent","onTransform","overwriteObj","maxZoom","minZoom","pinchToZoomInSensitivity","pinchToZoomOutSensitivity","distance","onZoomBefore","zoomGrowthFromLastGestureState","pinchToZoomSensitivity","deltaGrowth","deltaGrowthAdjustedBySensitivity","newZoomLevel","gestureCenterPoint","zoomCenter","debug","_setPinchDebugPoints","oldOffsetX","oldOffsetY","oldScale","newScale","offsetShift","_calcOffsetShiftSinceLastGestureState","onZoomAfter","gestureResponderEvent","points","touches","movementSensibility","shift","shiftX","shiftY","moveX","moveY","_setNewOffsetPosition","newOffsetX","newOffsetY","onShiftingBefore","onShiftingAfter","touch","push","_removeTouch","splice","indexOf","onDoubleTapBefore","onDoubleTapAfter","doubleTapZoomToCenter","nextZoomStep","_getNextZoomStep","zoomPositionCoordinates","_zoomToLocation","then","zoomStep","prevScale","listenerId","removeListener","zoomTo","zoomBy","zoomLevelChange","moveTo","moveBy","offsetChangeX","offsetChangeY","render","styles","container","panHandlers","zoomSubject","style","transform","scale","getTranslateTransform","children","visualTouchFeedbackEnabled","map","animationDuration","index","undefined","flex","justifyContent","alignItems","position","overflow"],"mappings":"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","sourcesContent":["import React, { Component, createRef, RefObject } from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  InteractionManager,\n  PanResponder,\n  PanResponderGestureState,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport {\n  Vec2D,\n  ReactNativeZoomableViewProps,\n  ReactNativeZoomableViewState,\n  TouchPoint,\n  ZoomableViewEvent,\n} from './typings';\n\nimport { AnimatedTouchFeedback } from './components';\nimport { DebugTouchPoint } from './debugHelper';\nimport {\n  calcGestureCenterPoint,\n  calcGestureTouchDistance,\n  calcNewScaledOffsetForZoomCentering,\n} from './helper';\nimport { applyPanBoundariesToOffset } from './helper/applyPanBoundariesToOffset';\nimport {\n  getBoundaryCrossedAnim,\n  getPanMomentumDecayAnim,\n  getZoomToAnimation,\n} from './animations';\n\nconst initialState = {\n  originalWidth: null,\n  originalHeight: null,\n  originalPageX: null,\n  originalPageY: null,\n} as ReactNativeZoomableViewState;\n\nclass ReactNativeZoomableView extends Component<\n  ReactNativeZoomableViewProps,\n  ReactNativeZoomableViewState\n> {\n  zoomSubjectWrapperRef: RefObject<View>;\n  gestureHandlers: any;\n  doubleTapFirstTapReleaseTimestamp: number;\n\n  static defaultProps = {\n    zoomEnabled: true,\n    panEnabled: true,\n    initialZoom: 1,\n    initialOffsetX: 0,\n    initialOffsetY: 0,\n    maxZoom: 1.5,\n    minZoom: 0.5,\n    pinchToZoomInSensitivity: 1,\n    pinchToZoomOutSensitivity: 1,\n    movementSensibility: 1,\n    doubleTapDelay: 300,\n    bindToBorders: true,\n    zoomStep: 0.5,\n    onLongPress: null,\n    longPressDuration: 700,\n    contentWidth: undefined,\n    contentHeight: undefined,\n    panBoundaryPadding: 0,\n    visualTouchFeedbackEnabled: true,\n    disablePanOnInitialZoom: false,\n  };\n\n  private panAnim = new Animated.ValueXY({ x: 0, y: 0 });\n  private zoomAnim = new Animated.Value(1);\n\n  private __offsets = {\n    x: {\n      value: 0,\n      boundaryCrossedAnimInEffect: false,\n    },\n    y: {\n      value: 0,\n      boundaryCrossedAnimInEffect: false,\n    },\n  };\n\n  private zoomLevel = 1;\n  private lastGestureCenterPosition: { x: number; y: number } = null;\n  private lastGestureTouchDistance: number;\n  private gestureType: 'pinch' | 'shift' | 'null';\n  private gestureStarted = false;\n\n  /**\n   * Last press time (used to evaluate whether user double tapped)\n   * @type {number}\n   */\n  private longPressTimeout: NodeJS.Timeout = null;\n  private onTransformInvocationInitialized: boolean;\n  private singleTapTimeoutId: NodeJS.Timeout;\n  private touches: TouchPoint[] = [];\n  private doubleTapFirstTap: TouchPoint;\n  private measureZoomSubjectInterval: NodeJS.Timer;\n\n  constructor(props) {\n    super(props);\n\n    this.gestureHandlers = PanResponder.create({\n      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminate: (evt, gestureState) => {\n        // We should also call _handlePanResponderEnd\n        // to properly perform cleanups when the gesture is terminated\n        // (aka gesture handling responsibility is taken over by another component).\n        // This also fixes a weird issue where\n        // on real device, sometimes onPanResponderRelease is not called when you lift 2 fingers up,\n        // but onPanResponderTerminate is called instead for no apparent reason.\n        this._handlePanResponderEnd(evt, gestureState);\n        this.props.onPanResponderTerminate?.(\n          evt,\n          gestureState,\n          this._getZoomableViewEventObject()\n        );\n      },\n      onPanResponderTerminationRequest: (evt, gestureState) =>\n        !!this.props.onPanResponderTerminationRequest?.(\n          evt,\n          gestureState,\n          this._getZoomableViewEventObject()\n        ),\n      // Defaults to true to prevent parent components, such as React Navigation's tab view, from taking over as responder.\n      onShouldBlockNativeResponder: (evt, gestureState) =>\n        this.props.onShouldBlockNativeResponder?.(\n          evt,\n          gestureState,\n          this._getZoomableViewEventObject()\n        ) ?? true,\n      onStartShouldSetPanResponderCapture: (evt, gestureState) =>\n        this.props.onStartShouldSetPanResponderCapture?.(evt, gestureState),\n      onMoveShouldSetPanResponderCapture: (evt, gestureState) =>\n        this.props.onMoveShouldSetPanResponderCapture?.(evt, gestureState),\n    });\n\n    this.zoomSubjectWrapperRef = createRef<View>();\n\n    if (this.props.zoomAnimatedValue)\n      this.zoomAnim = this.props.zoomAnimatedValue;\n    if (this.props.panAnimatedValueXY)\n      this.panAnim = this.props.panAnimatedValueXY;\n\n    this.zoomLevel = props.initialZoom;\n    this.offsetX = props.initialOffsetX;\n    this.offsetY = props.initialOffsetY;\n\n    this.panAnim.setValue({ x: this.offsetX, y: this.offsetY });\n    this.zoomAnim.setValue(this.zoomLevel);\n    this.panAnim.addListener(({ x, y }) => {\n      this.offsetX = x;\n      this.offsetY = y;\n    });\n    this.zoomAnim.addListener(({ value }) => {\n      this.zoomLevel = value;\n    });\n\n    this.state = {\n      ...initialState,\n    };\n\n    this.lastGestureTouchDistance = 150;\n\n    this.gestureType = null;\n  }\n\n  private set offsetX(x: number) {\n    this.__setOffset('x', x);\n  }\n  private set offsetY(y: number) {\n    this.__setOffset('y', y);\n  }\n  private get offsetX() {\n    return this.__getOffset('x');\n  }\n  private get offsetY() {\n    return this.__getOffset('y');\n  }\n  private __setOffset(axis: 'x' | 'y', offset) {\n    const offsetState = this.__offsets[axis];\n    const animValue = this.panAnim?.[axis];\n\n    if (this.props.bindToBorders) {\n      const containerSize =\n        axis === 'x' ? this.state?.originalWidth : this.state?.originalHeight;\n      const contentSize =\n        axis === 'x'\n          ? this.props.contentWidth || this.state?.originalWidth\n          : this.props.contentHeight || this.state?.originalHeight;\n\n      const boundOffset =\n        contentSize && containerSize\n          ? applyPanBoundariesToOffset(\n              offset,\n              containerSize,\n              contentSize,\n              this.zoomLevel,\n              this.props.panBoundaryPadding\n            )\n          : offset;\n\n      if (\n        animValue &&\n        !this.gestureType &&\n        !offsetState.boundaryCrossedAnimInEffect\n      ) {\n        const boundariesApplied =\n          boundOffset !== offset &&\n          boundOffset.toFixed(3) !== offset.toFixed(3);\n        if (boundariesApplied) {\n          offsetState.boundaryCrossedAnimInEffect = true;\n          getBoundaryCrossedAnim(this.panAnim[axis], boundOffset).start(() => {\n            offsetState.boundaryCrossedAnimInEffect = false;\n          });\n          return;\n        }\n      }\n    }\n\n    offsetState.value = offset;\n  }\n  private __getOffset(axis: 'x' | 'y') {\n    return this.__offsets[axis].value;\n  }\n\n  componentDidUpdate(\n    prevProps: ReactNativeZoomableViewProps,\n    prevState: ReactNativeZoomableViewState\n  ) {\n    const { zoomEnabled, initialZoom } = this.props;\n    if (prevProps.zoomEnabled && !zoomEnabled) {\n      this.zoomLevel = initialZoom;\n      this.zoomAnim.setValue(this.zoomLevel);\n    }\n    if (\n      !this.onTransformInvocationInitialized &&\n      this._invokeOnTransform().successful\n    ) {\n      this.panAnim.addListener(() => this._invokeOnTransform());\n      this.zoomAnim.addListener(() => this._invokeOnTransform());\n      this.onTransformInvocationInitialized = true;\n    }\n\n    const currState = this.state;\n    const originalMeasurementsChanged =\n      currState.originalHeight !== prevState.originalHeight ||\n      currState.originalWidth !== prevState.originalWidth ||\n      currState.originalPageX !== prevState.originalPageX ||\n      currState.originalPageY !== prevState.originalPageY;\n\n    if (this.onTransformInvocationInitialized && originalMeasurementsChanged) {\n      this._invokeOnTransform();\n    }\n  }\n\n  componentDidMount() {\n    this.grabZoomSubjectOriginalMeasurements();\n    // We've already run `grabZoomSubjectOriginalMeasurements` at various events\n    // to make sure the measurements are promptly updated.\n    // However, there might be cases we haven't accounted for, especially when\n    // native processes are involved. To account for those cases,\n    // we'll use an interval here to ensure we're always up-to-date.\n    // The `setState` in `grabZoomSubjectOriginalMeasurements` won't trigger a rerender\n    // if the values given haven't changed, so we're not running performance risk here.\n    this.measureZoomSubjectInterval = setInterval(\n      this.grabZoomSubjectOriginalMeasurements,\n      1e3\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.measureZoomSubjectInterval);\n  }\n\n  /**\n   * try to invoke onTransform\n   * @private\n   */\n  _invokeOnTransform() {\n    const zoomableViewEvent = this._getZoomableViewEventObject();\n\n    if (!zoomableViewEvent.originalWidth || !zoomableViewEvent.originalHeight)\n      return { successful: false };\n\n    this.props.onTransform?.(zoomableViewEvent);\n\n    return { successful: true };\n  }\n\n  /**\n   * Returns additional information about components current state for external event hooks\n   *\n   * @returns {{}}\n   * @private\n   */\n  _getZoomableViewEventObject(overwriteObj = {}): ZoomableViewEvent {\n    return {\n      zoomLevel: this.zoomLevel,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      originalHeight: this.state.originalHeight,\n      originalWidth: this.state.originalWidth,\n      originalPageX: this.state.originalPageX,\n      originalPageY: this.state.originalPageY,\n      ...overwriteObj,\n    } as ZoomableViewEvent;\n  }\n\n  /**\n   * Get the original box dimensions and save them for later use.\n   * (They will be used to calculate boxBorders)\n   *\n   * @private\n   */\n  private grabZoomSubjectOriginalMeasurements = () => {\n    // make sure we measure after animations are complete\n    InteractionManager.runAfterInteractions(() => {\n      // this setTimeout is here to fix a weird issue on iOS where the measurements are all `0`\n      // when navigating back (react-navigation stack) from another view\n      // while closing the keyboard at the same time\n      setTimeout(() => {\n        // In normal conditions, we're supposed to measure zoomSubject instead of its wrapper.\n        // However, our zoomSubject may have been transformed by an initial zoomLevel or offset,\n        // in which case these measurements will not represent the true \"original\" measurements.\n        // We just need to make sure the zoomSubjectWrapper perfectly aligns with the zoomSubject\n        // (no border, space, or anything between them)\n        const zoomSubjectWrapperRef = this.zoomSubjectWrapperRef;\n        // we don't wanna measure when zoomSubjectWrapperRef is not yet available or has been unmounted\n        zoomSubjectWrapperRef.current?.measureInWindow(\n          (x, y, width, height) => {\n            this.setState({\n              originalWidth: width,\n              originalHeight: height,\n              originalPageX: x,\n              originalPageY: y,\n            });\n          }\n        );\n      });\n    });\n  };\n\n  /**\n   * Handles the start of touch events and checks for taps\n   *\n   * @param e\n   * @param gestureState\n   * @returns {boolean}\n   *\n   * @private\n   */\n  _handleStartShouldSetPanResponder = (\n    e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => {\n    if (this.props.onStartShouldSetPanResponder) {\n      this.props.onStartShouldSetPanResponder(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject(),\n        false\n      );\n    }\n\n    // Always set pan responder on start\n    // of gesture so we can handle tap.\n    // \"Pan threshold validation\" will be handled\n    // in `onPanResponderMove` instead of in `onMoveShouldSetPanResponder`\n    return true;\n  };\n\n  /**\n   * Calculates pinch distance\n   *\n   * @param e\n   * @param gestureState\n   * @private\n   */\n  _handlePanResponderGrant = (e, gestureState) => {\n    if (this.props.onLongPress) {\n      this.longPressTimeout = setTimeout(() => {\n        this.props.onLongPress?.(\n          e,\n          gestureState,\n          this._getZoomableViewEventObject()\n        );\n        this.longPressTimeout = null;\n      }, this.props.longPressDuration);\n    }\n\n    this.props.onPanResponderGrant?.(\n      e,\n      gestureState,\n      this._getZoomableViewEventObject()\n    );\n\n    this.panAnim.stopAnimation();\n    this.zoomAnim.stopAnimation();\n    this.gestureStarted = true;\n  };\n\n  /**\n   * Handles the end of touch events\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePanResponderEnd = (e, gestureState) => {\n    if (!this.gestureType) {\n      this._resolveAndHandleTap(e);\n    }\n\n    this.setState({ debugPoints: [] });\n\n    this.lastGestureCenterPosition = null;\n\n    // Trigger final shift animation unless panEnabled is false or disablePanOnInitialZoom is true and we're on the initial zoom level\n    if (\n      this.props.panEnabled &&\n      !(\n        this.gestureType === 'shift' &&\n        this.props.disablePanOnInitialZoom &&\n        this.zoomLevel === this.props.initialZoom\n      )\n    ) {\n      getPanMomentumDecayAnim(this.panAnim, {\n        x: gestureState.vx / this.zoomLevel,\n        y: gestureState.vy / this.zoomLevel,\n      }).start();\n    }\n\n    if (this.longPressTimeout) {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = null;\n    }\n\n    this.props.onPanResponderEnd?.(\n      e,\n      gestureState,\n      this._getZoomableViewEventObject()\n    );\n\n    if (this.gestureType === 'pinch') {\n      this.props.onZoomEnd?.(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject()\n      );\n    } else if (this.gestureType === 'shift') {\n      this.props.onShiftingEnd?.(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject()\n      );\n    }\n\n    this.gestureType = null;\n    this.gestureStarted = false;\n  };\n\n  /**\n   * Handles the actual movement of our pan responder\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePanResponderMove = (\n    e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => {\n    if (this.props.onPanResponderMove) {\n      if (\n        this.props.onPanResponderMove(\n          e,\n          gestureState,\n          this._getZoomableViewEventObject()\n        )\n      ) {\n        return false;\n      }\n    }\n\n    // Only supports 2 touches and below,\n    // any invalid number will cause the gesture to end.\n    if (gestureState.numberActiveTouches <= 2) {\n      if (!this.gestureStarted) {\n        this._handlePanResponderGrant(e, gestureState);\n      }\n    } else {\n      if (this.gestureStarted) {\n        this._handlePanResponderEnd(e, gestureState);\n      }\n      return true;\n    }\n\n    if (gestureState.numberActiveTouches === 2) {\n      if (this.longPressTimeout) {\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n      }\n\n      // change some measurement states when switching gesture to ensure a smooth transition\n      if (this.gestureType !== 'pinch') {\n        this.lastGestureCenterPosition = calcGestureCenterPoint(\n          e,\n          gestureState\n        );\n        this.lastGestureTouchDistance = calcGestureTouchDistance(\n          e,\n          gestureState\n        );\n      }\n      this.gestureType = 'pinch';\n      this._handlePinching(e, gestureState);\n    } else if (gestureState.numberActiveTouches === 1) {\n      if (\n        this.longPressTimeout &&\n        (Math.abs(gestureState.dx) > 5 || Math.abs(gestureState.dy) > 5)\n      ) {\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n      }\n      // change some measurement states when switching gesture to ensure a smooth transition\n      if (this.gestureType !== 'shift') {\n        this.lastGestureCenterPosition = calcGestureCenterPoint(\n          e,\n          gestureState\n        );\n      }\n\n      const { dx, dy } = gestureState;\n      const isShiftGesture = Math.abs(dx) > 2 || Math.abs(dy) > 2;\n      if (isShiftGesture) {\n        this.gestureType = 'shift';\n        this._handleShifting(gestureState);\n      }\n    }\n  };\n\n  /**\n   * Handles the pinch movement and zooming\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePinching(\n    e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    if (!this.props.zoomEnabled) return;\n\n    const {\n      maxZoom,\n      minZoom,\n      pinchToZoomInSensitivity,\n      pinchToZoomOutSensitivity,\n    } = this.props;\n\n    const distance = calcGestureTouchDistance(e, gestureState);\n\n    if (\n      this.props.onZoomBefore &&\n      this.props.onZoomBefore(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject()\n      )\n    ) {\n      return;\n    }\n\n    // define the new zoom level and take zoom level sensitivity into consideration\n    const zoomGrowthFromLastGestureState =\n      distance / this.lastGestureTouchDistance;\n    this.lastGestureTouchDistance = distance;\n\n    const pinchToZoomSensitivity =\n      zoomGrowthFromLastGestureState < 1\n        ? pinchToZoomOutSensitivity\n        : pinchToZoomInSensitivity;\n\n    const deltaGrowth = zoomGrowthFromLastGestureState - 1;\n    // 0 - no resistance\n    // 10 - 90% resistance\n    const deltaGrowthAdjustedBySensitivity =\n      deltaGrowth * (1 - (pinchToZoomSensitivity * 9) / 100);\n\n    let newZoomLevel = this.zoomLevel * (1 + deltaGrowthAdjustedBySensitivity);\n\n    // make sure max and min zoom levels are respected\n    if (maxZoom !== null && newZoomLevel > maxZoom) {\n      newZoomLevel = maxZoom;\n    }\n\n    if (newZoomLevel < minZoom) {\n      newZoomLevel = minZoom;\n    }\n\n    const gestureCenterPoint = calcGestureCenterPoint(e, gestureState);\n\n    if (!gestureCenterPoint) return;\n\n    const zoomCenter = {\n      x: gestureCenterPoint.x - this.state.originalPageX,\n      y: gestureCenterPoint.y - this.state.originalPageY,\n    };\n\n    // Uncomment to debug\n    this.props.debug && this._setPinchDebugPoints(e, zoomCenter);\n\n    const { originalHeight, originalWidth } = this.state;\n\n    const oldOffsetX = this.offsetX;\n    const oldOffsetY = this.offsetY;\n    const oldScale = this.zoomLevel;\n    const newScale = newZoomLevel;\n\n    let offsetY = calcNewScaledOffsetForZoomCentering(\n      oldOffsetY,\n      originalHeight,\n      oldScale,\n      newScale,\n      zoomCenter.y\n    );\n    let offsetX = calcNewScaledOffsetForZoomCentering(\n      oldOffsetX,\n      originalWidth,\n      oldScale,\n      newScale,\n      zoomCenter.x\n    );\n\n    const offsetShift =\n      this._calcOffsetShiftSinceLastGestureState(gestureCenterPoint);\n    if (offsetShift) {\n      offsetX += offsetShift.x;\n      offsetY += offsetShift.y;\n    }\n\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.zoomLevel = newScale;\n\n    this.panAnim.setValue({ x: this.offsetX, y: this.offsetY });\n    this.zoomAnim.setValue(this.zoomLevel);\n\n    this.props.onZoomAfter?.(\n      e,\n      gestureState,\n      this._getZoomableViewEventObject()\n    );\n  }\n\n  /**\n   * Used to debug pinch events\n   * @param gestureResponderEvent\n   * @param zoomCenter\n   * @param points\n   */\n  _setPinchDebugPoints(\n    gestureResponderEvent: GestureResponderEvent,\n    zoomCenter: Vec2D,\n    ...points: Vec2D[]\n  ) {\n    const { touches } = gestureResponderEvent.nativeEvent;\n    const { originalPageY, originalPageX } = this.state;\n    this.setState({\n      debugPoints: [\n        {\n          x: touches[0].pageX - originalPageX,\n          y: touches[0].pageY - originalPageY,\n        },\n        {\n          x: touches[1].pageX - originalPageX,\n          y: touches[1].pageY - originalPageY,\n        },\n        zoomCenter,\n        ...points,\n      ],\n    });\n  }\n\n  /**\n   * Calculates the amount the offset should shift since the last position during panning\n   *\n   * @param {Vec2D} gestureCenterPoint\n   *\n   * @private\n   */\n  _calcOffsetShiftSinceLastGestureState(gestureCenterPoint: Vec2D) {\n    const { movementSensibility } = this.props;\n\n    let shift = null;\n\n    if (this.lastGestureCenterPosition) {\n      const dx = gestureCenterPoint.x - this.lastGestureCenterPosition.x;\n      const dy = gestureCenterPoint.y - this.lastGestureCenterPosition.y;\n\n      const shiftX = dx / this.zoomLevel / movementSensibility;\n      const shiftY = dy / this.zoomLevel / movementSensibility;\n\n      shift = {\n        x: shiftX,\n        y: shiftY,\n      };\n    }\n\n    this.lastGestureCenterPosition = gestureCenterPoint;\n\n    return shift;\n  }\n\n  /**\n   * Handles movement by tap and move\n   *\n   * @param gestureState\n   *\n   * @private\n   */\n  _handleShifting(gestureState: PanResponderGestureState) {\n    // Skips shifting if panEnabled is false or disablePanOnInitialZoom is true and we're on the initial zoom level\n    if (\n      !this.props.panEnabled ||\n      (this.props.disablePanOnInitialZoom &&\n        this.zoomLevel === this.props.initialZoom)\n    ) {\n      return;\n    }\n    const shift = this._calcOffsetShiftSinceLastGestureState({\n      x: gestureState.moveX,\n      y: gestureState.moveY,\n    });\n    if (!shift) return;\n\n    const offsetX = this.offsetX + shift.x;\n    const offsetY = this.offsetY + shift.y;\n\n    if (this.props.debug) {\n      const x = gestureState.moveX - this.state.originalPageX;\n      const y = gestureState.moveY - this.state.originalPageY;\n      this.setState({ debugPoints: [{ x, y }] });\n    }\n\n    this._setNewOffsetPosition(offsetX, offsetY);\n  }\n\n  /**\n   * Set the state to offset moved\n   *\n   * @param {number} newOffsetX\n   * @param {number} newOffsetY\n   * @returns\n   */\n  async _setNewOffsetPosition(newOffsetX: number, newOffsetY: number) {\n    const { onShiftingBefore, onShiftingAfter } = this.props;\n\n    if (onShiftingBefore?.(null, null, this._getZoomableViewEventObject())) {\n      return;\n    }\n\n    this.offsetX = newOffsetX;\n    this.offsetY = newOffsetY;\n\n    this.panAnim.setValue({ x: this.offsetX, y: this.offsetY });\n    this.zoomAnim.setValue(this.zoomLevel);\n\n    onShiftingAfter?.(null, null, this._getZoomableViewEventObject());\n  }\n\n  /**\n   * Check whether the press event is double tap\n   * or single tap and handle the event accordingly\n   *\n   * @param e\n   *\n   * @private\n   */\n  private _resolveAndHandleTap = (e: GestureResponderEvent) => {\n    const now = Date.now();\n    if (\n      this.doubleTapFirstTapReleaseTimestamp &&\n      now - this.doubleTapFirstTapReleaseTimestamp < this.props.doubleTapDelay\n    ) {\n      this._addTouch({\n        ...this.doubleTapFirstTap,\n        id: now.toString(),\n        isSecondTap: true,\n      });\n      clearTimeout(this.singleTapTimeoutId);\n      delete this.doubleTapFirstTapReleaseTimestamp;\n      delete this.singleTapTimeoutId;\n      delete this.doubleTapFirstTap;\n      this._handleDoubleTap(e);\n    } else {\n      this.doubleTapFirstTapReleaseTimestamp = now;\n      this.doubleTapFirstTap = {\n        id: now.toString(),\n        x: e.nativeEvent.pageX - this.state.originalPageX,\n        y: e.nativeEvent.pageY - this.state.originalPageY,\n      };\n      this._addTouch(this.doubleTapFirstTap);\n\n      // persist event so e.nativeEvent is preserved after a timeout delay\n      e.persist();\n      this.singleTapTimeoutId = setTimeout(() => {\n        delete this.doubleTapFirstTapReleaseTimestamp;\n        delete this.singleTapTimeoutId;\n        this.props.onSingleTap?.(e, this._getZoomableViewEventObject());\n      }, this.props.doubleTapDelay);\n    }\n  };\n\n  private _addTouch(touch: TouchPoint) {\n    this.touches.push(touch);\n    this.setState({ touches: [...this.touches] });\n  }\n\n  private _removeTouch(touch: TouchPoint) {\n    this.touches.splice(this.touches.indexOf(touch), 1);\n    this.setState({ touches: [...this.touches] });\n  }\n\n  /**\n   * Handles the double tap event\n   *\n   * @param e\n   *\n   * @private\n   */\n  _handleDoubleTap(e: GestureResponderEvent) {\n    const { onDoubleTapBefore, onDoubleTapAfter, doubleTapZoomToCenter } =\n      this.props;\n\n    onDoubleTapBefore?.(e, this._getZoomableViewEventObject());\n\n    const nextZoomStep = this._getNextZoomStep();\n    const { originalPageX, originalPageY } = this.state;\n\n    // define new zoom position coordinates\n    const zoomPositionCoordinates = {\n      x: e.nativeEvent.pageX - originalPageX,\n      y: e.nativeEvent.pageY - originalPageY,\n    };\n\n    // if doubleTapZoomToCenter enabled -> always zoom to center instead\n    if (doubleTapZoomToCenter) {\n      zoomPositionCoordinates.x = 0;\n      zoomPositionCoordinates.y = 0;\n    }\n\n    this._zoomToLocation(\n      zoomPositionCoordinates.x,\n      zoomPositionCoordinates.y,\n      nextZoomStep\n    ).then(() => {\n      onDoubleTapAfter?.(\n        e,\n        this._getZoomableViewEventObject({ zoomLevel: nextZoomStep })\n      );\n    });\n  }\n\n  /**\n   * Returns the next zoom step based on current step and zoomStep property.\n   * If we are zoomed all the way in -> return to initialzoom\n   *\n   * @returns {*}\n   */\n  _getNextZoomStep() {\n    const { zoomStep, maxZoom, initialZoom } = this.props;\n    const { zoomLevel } = this;\n\n    if (zoomLevel.toFixed(2) === maxZoom.toFixed(2)) {\n      return initialZoom;\n    }\n\n    const nextZoomStep = zoomLevel * (1 + zoomStep);\n    if (nextZoomStep > maxZoom) {\n      return maxZoom;\n    }\n\n    return nextZoomStep;\n  }\n\n  /**\n   * Zooms to a specific location in our view\n   *\n   * @param x\n   * @param y\n   * @param newZoomLevel\n   *\n   * @private\n   */\n  async _zoomToLocation(x: number, y: number, newZoomLevel: number) {\n    if (!this.props.zoomEnabled) return;\n\n    this.props.onZoomBefore?.(null, null, this._getZoomableViewEventObject());\n\n    // == Perform Zoom Animation ==\n    // Calculates panAnim values based on changes in zoomAnim.\n    let prevScale = this.zoomLevel;\n    // Since zoomAnim is calculated in native driver,\n    //  it will jitter panAnim once in a while,\n    //  because here panAnim is being calculated in js.\n    // However the jittering should mostly occur in simulator.\n    const listenerId = this.zoomAnim.addListener(({ value: newScale }) => {\n      this.panAnim.setValue({\n        x: calcNewScaledOffsetForZoomCentering(\n          this.offsetX,\n          this.state.originalWidth,\n          prevScale,\n          newScale,\n          x\n        ),\n        y: calcNewScaledOffsetForZoomCentering(\n          this.offsetY,\n          this.state.originalHeight,\n          prevScale,\n          newScale,\n          y\n        ),\n      });\n      prevScale = newScale;\n    });\n    getZoomToAnimation(this.zoomAnim, newZoomLevel).start(() => {\n      this.zoomAnim.removeListener(listenerId);\n    });\n    // == Zoom Animation Ends ==\n\n    this.props.onZoomAfter?.(null, null, this._getZoomableViewEventObject());\n  }\n\n  /**\n   * Zooms to a specificied zoom level.\n   * Returns a promise if everything was updated and a boolean, whether it could be updated or if it exceeded the min/max zoom limits.\n   *\n   * @param {number} newZoomLevel\n   *\n   * @return {Promise<bool>}\n   */\n  async zoomTo(newZoomLevel: number): Promise<boolean> {\n    if (\n      // if we would go out of our min/max limits -> abort\n      newZoomLevel > this.props.maxZoom ||\n      newZoomLevel < this.props.minZoom\n    )\n      return false;\n\n    await this._zoomToLocation(0, 0, newZoomLevel);\n    return true;\n  }\n\n  /**\n   * Zooms in or out by a specified change level\n   * Use a positive number for `zoomLevelChange` to zoom in\n   * Use a negative number for `zoomLevelChange` to zoom out\n   *\n   * Returns a promise if everything was updated and a boolean, whether it could be updated or if it exceeded the min/max zoom limits.\n   *\n   * @param {number | null} zoomLevelChange\n   *\n   * @return {Promise<bool>}\n   */\n  zoomBy(zoomLevelChange: number = null): Promise<boolean> {\n    // if no zoom level Change given -> just use zoom step\n    if (!zoomLevelChange) {\n      zoomLevelChange = this.props.zoomStep;\n    }\n\n    return this.zoomTo(this.zoomLevel + zoomLevelChange);\n  }\n\n  /**\n   * Moves the zoomed view to a specified position\n   * Returns a promise when finished\n   *\n   * @param {number} newOffsetX the new position we want to move it to (x-axis)\n   * @param {number} newOffsetY the new position we want to move it to (y-axis)\n   *\n   * @return {Promise<bool>}\n   */\n  moveTo(newOffsetX: number, newOffsetY: number): Promise<void> {\n    const { originalWidth, originalHeight } = this.state;\n\n    const offsetX = (newOffsetX - originalWidth / 2) / this.zoomLevel;\n    const offsetY = (newOffsetY - originalHeight / 2) / this.zoomLevel;\n\n    return this._setNewOffsetPosition(-offsetX, -offsetY);\n  }\n\n  /**\n   * Moves the zoomed view by a certain amount.\n   *\n   * Returns a promise when finished\n   *\n   * @param {number} offsetChangeX the amount we want to move the offset by (x-axis)\n   * @param {number} offsetChangeY the amount we want to move the offset by (y-axis)\n   *\n   * @return {Promise<bool>}\n   */\n  moveBy(offsetChangeX: number, offsetChangeY: number): Promise<void> {\n    const offsetX =\n      (this.offsetX * this.zoomLevel - offsetChangeX) / this.zoomLevel;\n    const offsetY =\n      (this.offsetY * this.zoomLevel - offsetChangeY) / this.zoomLevel;\n\n    return this._setNewOffsetPosition(offsetX, offsetY);\n  }\n\n  render() {\n    return (\n      <View\n        style={styles.container}\n        {...this.gestureHandlers.panHandlers}\n        ref={this.zoomSubjectWrapperRef}\n        onLayout={this.grabZoomSubjectOriginalMeasurements}\n      >\n        <Animated.View\n          style={[\n            styles.zoomSubject,\n            this.props.style,\n            {\n              transform: [\n                { scale: this.zoomAnim },\n                ...this.panAnim.getTranslateTransform(),\n              ],\n            },\n          ]}\n        >\n          {this.props.children}\n        </Animated.View>\n        {this.props.visualTouchFeedbackEnabled &&\n          this.state.touches?.map((touch) => {\n            const animationDuration = this.props.doubleTapDelay;\n            return (\n              <AnimatedTouchFeedback\n                x={touch.x}\n                y={touch.y}\n                key={touch.id}\n                animationDuration={animationDuration}\n                onAnimationDone={() => this._removeTouch(touch)}\n              />\n            );\n          })}\n        {/* For Debugging Only */}\n        {(this.state.debugPoints || []).map(({ x, y }, index) => {\n          return <DebugTouchPoint key={index} x={x} y={y} />;\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  zoomSubject: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n    overflow: 'hidden',\n  },\n});\n\nexport default ReactNativeZoomableView;\n"]}