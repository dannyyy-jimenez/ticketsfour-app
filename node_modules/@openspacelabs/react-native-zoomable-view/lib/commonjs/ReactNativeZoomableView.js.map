{"version":3,"sources":["ReactNativeZoomableView.tsx"],"names":["initialState","originalWidth","originalHeight","originalPageX","originalPageY","ReactNativeZoomableView","Component","constructor","props","Animated","ValueXY","x","y","Value","value","boundaryCrossedAnimInEffect","InteractionManager","runAfterInteractions","setTimeout","zoomSubjectWrapperRef","current","measureInWindow","width","height","setState","e","gestureState","onStartShouldSetPanResponder","_getZoomableViewEventObject","onLongPress","longPressTimeout","longPressDuration","onPanResponderGrant","panAnim","stopAnimation","zoomAnim","gestureStarted","gestureType","_resolveAndHandleTap","debugPoints","lastGestureCenterPosition","panEnabled","disablePanOnInitialZoom","zoomLevel","initialZoom","vx","vy","start","clearTimeout","onPanResponderEnd","onZoomEnd","onShiftingEnd","onPanResponderMove","numberActiveTouches","_handlePanResponderGrant","_handlePanResponderEnd","lastGestureTouchDistance","_handlePinching","Math","abs","dx","dy","isShiftGesture","_handleShifting","now","Date","doubleTapFirstTapReleaseTimestamp","doubleTapDelay","_addTouch","doubleTapFirstTap","id","toString","isSecondTap","singleTapTimeoutId","_handleDoubleTap","nativeEvent","pageX","state","pageY","persist","onSingleTap","gestureHandlers","PanResponder","create","_handleStartShouldSetPanResponder","_handlePanResponderMove","onPanResponderRelease","onPanResponderTerminate","evt","onPanResponderTerminationRequest","onShouldBlockNativeResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponderCapture","zoomAnimatedValue","panAnimatedValueXY","offsetX","initialOffsetX","offsetY","initialOffsetY","setValue","addListener","__setOffset","__getOffset","axis","offset","offsetState","__offsets","animValue","bindToBorders","containerSize","contentSize","contentWidth","contentHeight","boundOffset","panBoundaryPadding","boundariesApplied","toFixed","componentDidUpdate","prevProps","prevState","zoomEnabled","onTransformInvocationInitialized","_invokeOnTransform","successful","currState","originalMeasurementsChanged","componentDidMount","grabZoomSubjectOriginalMeasurements","measureZoomSubjectInterval","setInterval","componentWillUnmount","clearInterval","zoomableViewEvent","onTransform","overwriteObj","maxZoom","minZoom","pinchToZoomInSensitivity","pinchToZoomOutSensitivity","distance","onZoomBefore","zoomGrowthFromLastGestureState","pinchToZoomSensitivity","deltaGrowth","deltaGrowthAdjustedBySensitivity","newZoomLevel","gestureCenterPoint","zoomCenter","debug","_setPinchDebugPoints","oldOffsetX","oldOffsetY","oldScale","newScale","offsetShift","_calcOffsetShiftSinceLastGestureState","onZoomAfter","gestureResponderEvent","points","touches","movementSensibility","shift","shiftX","shiftY","moveX","moveY","_setNewOffsetPosition","newOffsetX","newOffsetY","onShiftingBefore","onShiftingAfter","touch","push","_removeTouch","splice","indexOf","onDoubleTapBefore","onDoubleTapAfter","doubleTapZoomToCenter","nextZoomStep","_getNextZoomStep","zoomPositionCoordinates","_zoomToLocation","then","zoomStep","prevScale","listenerId","removeListener","zoomTo","zoomBy","zoomLevelChange","moveTo","moveBy","offsetChangeX","offsetChangeY","render","styles","container","panHandlers","zoomSubject","style","transform","scale","getTranslateTransform","children","visualTouchFeedbackEnabled","map","animationDuration","index","undefined","StyleSheet","flex","justifyContent","alignItems","position","overflow"],"mappings":"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","sourcesContent":["import React, { Component, createRef, RefObject } from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  InteractionManager,\n  PanResponder,\n  PanResponderGestureState,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport {\n  Vec2D,\n  ReactNativeZoomableViewProps,\n  ReactNativeZoomableViewState,\n  TouchPoint,\n  ZoomableViewEvent,\n} from './typings';\n\nimport { AnimatedTouchFeedback } from './components';\nimport { DebugTouchPoint } from './debugHelper';\nimport {\n  calcGestureCenterPoint,\n  calcGestureTouchDistance,\n  calcNewScaledOffsetForZoomCentering,\n} from './helper';\nimport { applyPanBoundariesToOffset } from './helper/applyPanBoundariesToOffset';\nimport {\n  getBoundaryCrossedAnim,\n  getPanMomentumDecayAnim,\n  getZoomToAnimation,\n} from './animations';\n\nconst initialState = {\n  originalWidth: null,\n  originalHeight: null,\n  originalPageX: null,\n  originalPageY: null,\n} as ReactNativeZoomableViewState;\n\nclass ReactNativeZoomableView extends Component<\n  ReactNativeZoomableViewProps,\n  ReactNativeZoomableViewState\n> {\n  zoomSubjectWrapperRef: RefObject<View>;\n  gestureHandlers: any;\n  doubleTapFirstTapReleaseTimestamp: number;\n\n  static defaultProps = {\n    zoomEnabled: true,\n    panEnabled: true,\n    initialZoom: 1,\n    initialOffsetX: 0,\n    initialOffsetY: 0,\n    maxZoom: 1.5,\n    minZoom: 0.5,\n    pinchToZoomInSensitivity: 1,\n    pinchToZoomOutSensitivity: 1,\n    movementSensibility: 1,\n    doubleTapDelay: 300,\n    bindToBorders: true,\n    zoomStep: 0.5,\n    onLongPress: null,\n    longPressDuration: 700,\n    contentWidth: undefined,\n    contentHeight: undefined,\n    panBoundaryPadding: 0,\n    visualTouchFeedbackEnabled: true,\n    disablePanOnInitialZoom: false,\n  };\n\n  private panAnim = new Animated.ValueXY({ x: 0, y: 0 });\n  private zoomAnim = new Animated.Value(1);\n\n  private __offsets = {\n    x: {\n      value: 0,\n      boundaryCrossedAnimInEffect: false,\n    },\n    y: {\n      value: 0,\n      boundaryCrossedAnimInEffect: false,\n    },\n  };\n\n  private zoomLevel = 1;\n  private lastGestureCenterPosition: { x: number; y: number } = null;\n  private lastGestureTouchDistance: number;\n  private gestureType: 'pinch' | 'shift' | 'null';\n  private gestureStarted = false;\n\n  /**\n   * Last press time (used to evaluate whether user double tapped)\n   * @type {number}\n   */\n  private longPressTimeout: NodeJS.Timeout = null;\n  private onTransformInvocationInitialized: boolean;\n  private singleTapTimeoutId: NodeJS.Timeout;\n  private touches: TouchPoint[] = [];\n  private doubleTapFirstTap: TouchPoint;\n  private measureZoomSubjectInterval: NodeJS.Timer;\n\n  constructor(props) {\n    super(props);\n\n    this.gestureHandlers = PanResponder.create({\n      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminate: (evt, gestureState) => {\n        // We should also call _handlePanResponderEnd\n        // to properly perform cleanups when the gesture is terminated\n        // (aka gesture handling responsibility is taken over by another component).\n        // This also fixes a weird issue where\n        // on real device, sometimes onPanResponderRelease is not called when you lift 2 fingers up,\n        // but onPanResponderTerminate is called instead for no apparent reason.\n        this._handlePanResponderEnd(evt, gestureState);\n        this.props.onPanResponderTerminate?.(\n          evt,\n          gestureState,\n          this._getZoomableViewEventObject()\n        );\n      },\n      onPanResponderTerminationRequest: (evt, gestureState) =>\n        !!this.props.onPanResponderTerminationRequest?.(\n          evt,\n          gestureState,\n          this._getZoomableViewEventObject()\n        ),\n      // Defaults to true to prevent parent components, such as React Navigation's tab view, from taking over as responder.\n      onShouldBlockNativeResponder: (evt, gestureState) =>\n        this.props.onShouldBlockNativeResponder?.(\n          evt,\n          gestureState,\n          this._getZoomableViewEventObject()\n        ) ?? true,\n      onStartShouldSetPanResponderCapture: (evt, gestureState) =>\n        this.props.onStartShouldSetPanResponderCapture?.(evt, gestureState),\n      onMoveShouldSetPanResponderCapture: (evt, gestureState) =>\n        this.props.onMoveShouldSetPanResponderCapture?.(evt, gestureState),\n    });\n\n    this.zoomSubjectWrapperRef = createRef<View>();\n\n    if (this.props.zoomAnimatedValue)\n      this.zoomAnim = this.props.zoomAnimatedValue;\n    if (this.props.panAnimatedValueXY)\n      this.panAnim = this.props.panAnimatedValueXY;\n\n    this.zoomLevel = props.initialZoom;\n    this.offsetX = props.initialOffsetX;\n    this.offsetY = props.initialOffsetY;\n\n    this.panAnim.setValue({ x: this.offsetX, y: this.offsetY });\n    this.zoomAnim.setValue(this.zoomLevel);\n    this.panAnim.addListener(({ x, y }) => {\n      this.offsetX = x;\n      this.offsetY = y;\n    });\n    this.zoomAnim.addListener(({ value }) => {\n      this.zoomLevel = value;\n    });\n\n    this.state = {\n      ...initialState,\n    };\n\n    this.lastGestureTouchDistance = 150;\n\n    this.gestureType = null;\n  }\n\n  private set offsetX(x: number) {\n    this.__setOffset('x', x);\n  }\n  private set offsetY(y: number) {\n    this.__setOffset('y', y);\n  }\n  private get offsetX() {\n    return this.__getOffset('x');\n  }\n  private get offsetY() {\n    return this.__getOffset('y');\n  }\n  private __setOffset(axis: 'x' | 'y', offset) {\n    const offsetState = this.__offsets[axis];\n    const animValue = this.panAnim?.[axis];\n\n    if (this.props.bindToBorders) {\n      const containerSize =\n        axis === 'x' ? this.state?.originalWidth : this.state?.originalHeight;\n      const contentSize =\n        axis === 'x'\n          ? this.props.contentWidth || this.state?.originalWidth\n          : this.props.contentHeight || this.state?.originalHeight;\n\n      const boundOffset =\n        contentSize && containerSize\n          ? applyPanBoundariesToOffset(\n              offset,\n              containerSize,\n              contentSize,\n              this.zoomLevel,\n              this.props.panBoundaryPadding\n            )\n          : offset;\n\n      if (\n        animValue &&\n        !this.gestureType &&\n        !offsetState.boundaryCrossedAnimInEffect\n      ) {\n        const boundariesApplied =\n          boundOffset !== offset &&\n          boundOffset.toFixed(3) !== offset.toFixed(3);\n        if (boundariesApplied) {\n          offsetState.boundaryCrossedAnimInEffect = true;\n          getBoundaryCrossedAnim(this.panAnim[axis], boundOffset).start(() => {\n            offsetState.boundaryCrossedAnimInEffect = false;\n          });\n          return;\n        }\n      }\n    }\n\n    offsetState.value = offset;\n  }\n  private __getOffset(axis: 'x' | 'y') {\n    return this.__offsets[axis].value;\n  }\n\n  componentDidUpdate(\n    prevProps: ReactNativeZoomableViewProps,\n    prevState: ReactNativeZoomableViewState\n  ) {\n    const { zoomEnabled, initialZoom } = this.props;\n    if (prevProps.zoomEnabled && !zoomEnabled) {\n      this.zoomLevel = initialZoom;\n      this.zoomAnim.setValue(this.zoomLevel);\n    }\n    if (\n      !this.onTransformInvocationInitialized &&\n      this._invokeOnTransform().successful\n    ) {\n      this.panAnim.addListener(() => this._invokeOnTransform());\n      this.zoomAnim.addListener(() => this._invokeOnTransform());\n      this.onTransformInvocationInitialized = true;\n    }\n\n    const currState = this.state;\n    const originalMeasurementsChanged =\n      currState.originalHeight !== prevState.originalHeight ||\n      currState.originalWidth !== prevState.originalWidth ||\n      currState.originalPageX !== prevState.originalPageX ||\n      currState.originalPageY !== prevState.originalPageY;\n\n    if (this.onTransformInvocationInitialized && originalMeasurementsChanged) {\n      this._invokeOnTransform();\n    }\n  }\n\n  componentDidMount() {\n    this.grabZoomSubjectOriginalMeasurements();\n    // We've already run `grabZoomSubjectOriginalMeasurements` at various events\n    // to make sure the measurements are promptly updated.\n    // However, there might be cases we haven't accounted for, especially when\n    // native processes are involved. To account for those cases,\n    // we'll use an interval here to ensure we're always up-to-date.\n    // The `setState` in `grabZoomSubjectOriginalMeasurements` won't trigger a rerender\n    // if the values given haven't changed, so we're not running performance risk here.\n    this.measureZoomSubjectInterval = setInterval(\n      this.grabZoomSubjectOriginalMeasurements,\n      1e3\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.measureZoomSubjectInterval);\n  }\n\n  /**\n   * try to invoke onTransform\n   * @private\n   */\n  _invokeOnTransform() {\n    const zoomableViewEvent = this._getZoomableViewEventObject();\n\n    if (!zoomableViewEvent.originalWidth || !zoomableViewEvent.originalHeight)\n      return { successful: false };\n\n    this.props.onTransform?.(zoomableViewEvent);\n\n    return { successful: true };\n  }\n\n  /**\n   * Returns additional information about components current state for external event hooks\n   *\n   * @returns {{}}\n   * @private\n   */\n  _getZoomableViewEventObject(overwriteObj = {}): ZoomableViewEvent {\n    return {\n      zoomLevel: this.zoomLevel,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      originalHeight: this.state.originalHeight,\n      originalWidth: this.state.originalWidth,\n      originalPageX: this.state.originalPageX,\n      originalPageY: this.state.originalPageY,\n      ...overwriteObj,\n    } as ZoomableViewEvent;\n  }\n\n  /**\n   * Get the original box dimensions and save them for later use.\n   * (They will be used to calculate boxBorders)\n   *\n   * @private\n   */\n  private grabZoomSubjectOriginalMeasurements = () => {\n    // make sure we measure after animations are complete\n    InteractionManager.runAfterInteractions(() => {\n      // this setTimeout is here to fix a weird issue on iOS where the measurements are all `0`\n      // when navigating back (react-navigation stack) from another view\n      // while closing the keyboard at the same time\n      setTimeout(() => {\n        // In normal conditions, we're supposed to measure zoomSubject instead of its wrapper.\n        // However, our zoomSubject may have been transformed by an initial zoomLevel or offset,\n        // in which case these measurements will not represent the true \"original\" measurements.\n        // We just need to make sure the zoomSubjectWrapper perfectly aligns with the zoomSubject\n        // (no border, space, or anything between them)\n        const zoomSubjectWrapperRef = this.zoomSubjectWrapperRef;\n        // we don't wanna measure when zoomSubjectWrapperRef is not yet available or has been unmounted\n        zoomSubjectWrapperRef.current?.measureInWindow(\n          (x, y, width, height) => {\n            this.setState({\n              originalWidth: width,\n              originalHeight: height,\n              originalPageX: x,\n              originalPageY: y,\n            });\n          }\n        );\n      });\n    });\n  };\n\n  /**\n   * Handles the start of touch events and checks for taps\n   *\n   * @param e\n   * @param gestureState\n   * @returns {boolean}\n   *\n   * @private\n   */\n  _handleStartShouldSetPanResponder = (\n    e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => {\n    if (this.props.onStartShouldSetPanResponder) {\n      this.props.onStartShouldSetPanResponder(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject(),\n        false\n      );\n    }\n\n    // Always set pan responder on start\n    // of gesture so we can handle tap.\n    // \"Pan threshold validation\" will be handled\n    // in `onPanResponderMove` instead of in `onMoveShouldSetPanResponder`\n    return true;\n  };\n\n  /**\n   * Calculates pinch distance\n   *\n   * @param e\n   * @param gestureState\n   * @private\n   */\n  _handlePanResponderGrant = (e, gestureState) => {\n    if (this.props.onLongPress) {\n      this.longPressTimeout = setTimeout(() => {\n        this.props.onLongPress?.(\n          e,\n          gestureState,\n          this._getZoomableViewEventObject()\n        );\n        this.longPressTimeout = null;\n      }, this.props.longPressDuration);\n    }\n\n    this.props.onPanResponderGrant?.(\n      e,\n      gestureState,\n      this._getZoomableViewEventObject()\n    );\n\n    this.panAnim.stopAnimation();\n    this.zoomAnim.stopAnimation();\n    this.gestureStarted = true;\n  };\n\n  /**\n   * Handles the end of touch events\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePanResponderEnd = (e, gestureState) => {\n    if (!this.gestureType) {\n      this._resolveAndHandleTap(e);\n    }\n\n    this.setState({ debugPoints: [] });\n\n    this.lastGestureCenterPosition = null;\n\n    // Trigger final shift animation unless panEnabled is false or disablePanOnInitialZoom is true and we're on the initial zoom level\n    if (\n      this.props.panEnabled &&\n      !(\n        this.gestureType === 'shift' &&\n        this.props.disablePanOnInitialZoom &&\n        this.zoomLevel === this.props.initialZoom\n      )\n    ) {\n      getPanMomentumDecayAnim(this.panAnim, {\n        x: gestureState.vx / this.zoomLevel,\n        y: gestureState.vy / this.zoomLevel,\n      }).start();\n    }\n\n    if (this.longPressTimeout) {\n      clearTimeout(this.longPressTimeout);\n      this.longPressTimeout = null;\n    }\n\n    this.props.onPanResponderEnd?.(\n      e,\n      gestureState,\n      this._getZoomableViewEventObject()\n    );\n\n    if (this.gestureType === 'pinch') {\n      this.props.onZoomEnd?.(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject()\n      );\n    } else if (this.gestureType === 'shift') {\n      this.props.onShiftingEnd?.(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject()\n      );\n    }\n\n    this.gestureType = null;\n    this.gestureStarted = false;\n  };\n\n  /**\n   * Handles the actual movement of our pan responder\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePanResponderMove = (\n    e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => {\n    if (this.props.onPanResponderMove) {\n      if (\n        this.props.onPanResponderMove(\n          e,\n          gestureState,\n          this._getZoomableViewEventObject()\n        )\n      ) {\n        return false;\n      }\n    }\n\n    // Only supports 2 touches and below,\n    // any invalid number will cause the gesture to end.\n    if (gestureState.numberActiveTouches <= 2) {\n      if (!this.gestureStarted) {\n        this._handlePanResponderGrant(e, gestureState);\n      }\n    } else {\n      if (this.gestureStarted) {\n        this._handlePanResponderEnd(e, gestureState);\n      }\n      return true;\n    }\n\n    if (gestureState.numberActiveTouches === 2) {\n      if (this.longPressTimeout) {\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n      }\n\n      // change some measurement states when switching gesture to ensure a smooth transition\n      if (this.gestureType !== 'pinch') {\n        this.lastGestureCenterPosition = calcGestureCenterPoint(\n          e,\n          gestureState\n        );\n        this.lastGestureTouchDistance = calcGestureTouchDistance(\n          e,\n          gestureState\n        );\n      }\n      this.gestureType = 'pinch';\n      this._handlePinching(e, gestureState);\n    } else if (gestureState.numberActiveTouches === 1) {\n      if (\n        this.longPressTimeout &&\n        (Math.abs(gestureState.dx) > 5 || Math.abs(gestureState.dy) > 5)\n      ) {\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n      }\n      // change some measurement states when switching gesture to ensure a smooth transition\n      if (this.gestureType !== 'shift') {\n        this.lastGestureCenterPosition = calcGestureCenterPoint(\n          e,\n          gestureState\n        );\n      }\n\n      const { dx, dy } = gestureState;\n      const isShiftGesture = Math.abs(dx) > 2 || Math.abs(dy) > 2;\n      if (isShiftGesture) {\n        this.gestureType = 'shift';\n        this._handleShifting(gestureState);\n      }\n    }\n  };\n\n  /**\n   * Handles the pinch movement and zooming\n   *\n   * @param e\n   * @param gestureState\n   *\n   * @private\n   */\n  _handlePinching(\n    e: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) {\n    if (!this.props.zoomEnabled) return;\n\n    const {\n      maxZoom,\n      minZoom,\n      pinchToZoomInSensitivity,\n      pinchToZoomOutSensitivity,\n    } = this.props;\n\n    const distance = calcGestureTouchDistance(e, gestureState);\n\n    if (\n      this.props.onZoomBefore &&\n      this.props.onZoomBefore(\n        e,\n        gestureState,\n        this._getZoomableViewEventObject()\n      )\n    ) {\n      return;\n    }\n\n    // define the new zoom level and take zoom level sensitivity into consideration\n    const zoomGrowthFromLastGestureState =\n      distance / this.lastGestureTouchDistance;\n    this.lastGestureTouchDistance = distance;\n\n    const pinchToZoomSensitivity =\n      zoomGrowthFromLastGestureState < 1\n        ? pinchToZoomOutSensitivity\n        : pinchToZoomInSensitivity;\n\n    const deltaGrowth = zoomGrowthFromLastGestureState - 1;\n    // 0 - no resistance\n    // 10 - 90% resistance\n    const deltaGrowthAdjustedBySensitivity =\n      deltaGrowth * (1 - (pinchToZoomSensitivity * 9) / 100);\n\n    let newZoomLevel = this.zoomLevel * (1 + deltaGrowthAdjustedBySensitivity);\n\n    // make sure max and min zoom levels are respected\n    if (maxZoom !== null && newZoomLevel > maxZoom) {\n      newZoomLevel = maxZoom;\n    }\n\n    if (newZoomLevel < minZoom) {\n      newZoomLevel = minZoom;\n    }\n\n    const gestureCenterPoint = calcGestureCenterPoint(e, gestureState);\n\n    if (!gestureCenterPoint) return;\n\n    const zoomCenter = {\n      x: gestureCenterPoint.x - this.state.originalPageX,\n      y: gestureCenterPoint.y - this.state.originalPageY,\n    };\n\n    // Uncomment to debug\n    this.props.debug && this._setPinchDebugPoints(e, zoomCenter);\n\n    const { originalHeight, originalWidth } = this.state;\n\n    const oldOffsetX = this.offsetX;\n    const oldOffsetY = this.offsetY;\n    const oldScale = this.zoomLevel;\n    const newScale = newZoomLevel;\n\n    let offsetY = calcNewScaledOffsetForZoomCentering(\n      oldOffsetY,\n      originalHeight,\n      oldScale,\n      newScale,\n      zoomCenter.y\n    );\n    let offsetX = calcNewScaledOffsetForZoomCentering(\n      oldOffsetX,\n      originalWidth,\n      oldScale,\n      newScale,\n      zoomCenter.x\n    );\n\n    const offsetShift =\n      this._calcOffsetShiftSinceLastGestureState(gestureCenterPoint);\n    if (offsetShift) {\n      offsetX += offsetShift.x;\n      offsetY += offsetShift.y;\n    }\n\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.zoomLevel = newScale;\n\n    this.panAnim.setValue({ x: this.offsetX, y: this.offsetY });\n    this.zoomAnim.setValue(this.zoomLevel);\n\n    this.props.onZoomAfter?.(\n      e,\n      gestureState,\n      this._getZoomableViewEventObject()\n    );\n  }\n\n  /**\n   * Used to debug pinch events\n   * @param gestureResponderEvent\n   * @param zoomCenter\n   * @param points\n   */\n  _setPinchDebugPoints(\n    gestureResponderEvent: GestureResponderEvent,\n    zoomCenter: Vec2D,\n    ...points: Vec2D[]\n  ) {\n    const { touches } = gestureResponderEvent.nativeEvent;\n    const { originalPageY, originalPageX } = this.state;\n    this.setState({\n      debugPoints: [\n        {\n          x: touches[0].pageX - originalPageX,\n          y: touches[0].pageY - originalPageY,\n        },\n        {\n          x: touches[1].pageX - originalPageX,\n          y: touches[1].pageY - originalPageY,\n        },\n        zoomCenter,\n        ...points,\n      ],\n    });\n  }\n\n  /**\n   * Calculates the amount the offset should shift since the last position during panning\n   *\n   * @param {Vec2D} gestureCenterPoint\n   *\n   * @private\n   */\n  _calcOffsetShiftSinceLastGestureState(gestureCenterPoint: Vec2D) {\n    const { movementSensibility } = this.props;\n\n    let shift = null;\n\n    if (this.lastGestureCenterPosition) {\n      const dx = gestureCenterPoint.x - this.lastGestureCenterPosition.x;\n      const dy = gestureCenterPoint.y - this.lastGestureCenterPosition.y;\n\n      const shiftX = dx / this.zoomLevel / movementSensibility;\n      const shiftY = dy / this.zoomLevel / movementSensibility;\n\n      shift = {\n        x: shiftX,\n        y: shiftY,\n      };\n    }\n\n    this.lastGestureCenterPosition = gestureCenterPoint;\n\n    return shift;\n  }\n\n  /**\n   * Handles movement by tap and move\n   *\n   * @param gestureState\n   *\n   * @private\n   */\n  _handleShifting(gestureState: PanResponderGestureState) {\n    // Skips shifting if panEnabled is false or disablePanOnInitialZoom is true and we're on the initial zoom level\n    if (\n      !this.props.panEnabled ||\n      (this.props.disablePanOnInitialZoom &&\n        this.zoomLevel === this.props.initialZoom)\n    ) {\n      return;\n    }\n    const shift = this._calcOffsetShiftSinceLastGestureState({\n      x: gestureState.moveX,\n      y: gestureState.moveY,\n    });\n    if (!shift) return;\n\n    const offsetX = this.offsetX + shift.x;\n    const offsetY = this.offsetY + shift.y;\n\n    if (this.props.debug) {\n      const x = gestureState.moveX - this.state.originalPageX;\n      const y = gestureState.moveY - this.state.originalPageY;\n      this.setState({ debugPoints: [{ x, y }] });\n    }\n\n    this._setNewOffsetPosition(offsetX, offsetY);\n  }\n\n  /**\n   * Set the state to offset moved\n   *\n   * @param {number} newOffsetX\n   * @param {number} newOffsetY\n   * @returns\n   */\n  async _setNewOffsetPosition(newOffsetX: number, newOffsetY: number) {\n    const { onShiftingBefore, onShiftingAfter } = this.props;\n\n    if (onShiftingBefore?.(null, null, this._getZoomableViewEventObject())) {\n      return;\n    }\n\n    this.offsetX = newOffsetX;\n    this.offsetY = newOffsetY;\n\n    this.panAnim.setValue({ x: this.offsetX, y: this.offsetY });\n    this.zoomAnim.setValue(this.zoomLevel);\n\n    onShiftingAfter?.(null, null, this._getZoomableViewEventObject());\n  }\n\n  /**\n   * Check whether the press event is double tap\n   * or single tap and handle the event accordingly\n   *\n   * @param e\n   *\n   * @private\n   */\n  private _resolveAndHandleTap = (e: GestureResponderEvent) => {\n    const now = Date.now();\n    if (\n      this.doubleTapFirstTapReleaseTimestamp &&\n      now - this.doubleTapFirstTapReleaseTimestamp < this.props.doubleTapDelay\n    ) {\n      this._addTouch({\n        ...this.doubleTapFirstTap,\n        id: now.toString(),\n        isSecondTap: true,\n      });\n      clearTimeout(this.singleTapTimeoutId);\n      delete this.doubleTapFirstTapReleaseTimestamp;\n      delete this.singleTapTimeoutId;\n      delete this.doubleTapFirstTap;\n      this._handleDoubleTap(e);\n    } else {\n      this.doubleTapFirstTapReleaseTimestamp = now;\n      this.doubleTapFirstTap = {\n        id: now.toString(),\n        x: e.nativeEvent.pageX - this.state.originalPageX,\n        y: e.nativeEvent.pageY - this.state.originalPageY,\n      };\n      this._addTouch(this.doubleTapFirstTap);\n\n      // persist event so e.nativeEvent is preserved after a timeout delay\n      e.persist();\n      this.singleTapTimeoutId = setTimeout(() => {\n        delete this.doubleTapFirstTapReleaseTimestamp;\n        delete this.singleTapTimeoutId;\n        this.props.onSingleTap?.(e, this._getZoomableViewEventObject());\n      }, this.props.doubleTapDelay);\n    }\n  };\n\n  private _addTouch(touch: TouchPoint) {\n    this.touches.push(touch);\n    this.setState({ touches: [...this.touches] });\n  }\n\n  private _removeTouch(touch: TouchPoint) {\n    this.touches.splice(this.touches.indexOf(touch), 1);\n    this.setState({ touches: [...this.touches] });\n  }\n\n  /**\n   * Handles the double tap event\n   *\n   * @param e\n   *\n   * @private\n   */\n  _handleDoubleTap(e: GestureResponderEvent) {\n    const { onDoubleTapBefore, onDoubleTapAfter, doubleTapZoomToCenter } =\n      this.props;\n\n    onDoubleTapBefore?.(e, this._getZoomableViewEventObject());\n\n    const nextZoomStep = this._getNextZoomStep();\n    const { originalPageX, originalPageY } = this.state;\n\n    // define new zoom position coordinates\n    const zoomPositionCoordinates = {\n      x: e.nativeEvent.pageX - originalPageX,\n      y: e.nativeEvent.pageY - originalPageY,\n    };\n\n    // if doubleTapZoomToCenter enabled -> always zoom to center instead\n    if (doubleTapZoomToCenter) {\n      zoomPositionCoordinates.x = 0;\n      zoomPositionCoordinates.y = 0;\n    }\n\n    this._zoomToLocation(\n      zoomPositionCoordinates.x,\n      zoomPositionCoordinates.y,\n      nextZoomStep\n    ).then(() => {\n      onDoubleTapAfter?.(\n        e,\n        this._getZoomableViewEventObject({ zoomLevel: nextZoomStep })\n      );\n    });\n  }\n\n  /**\n   * Returns the next zoom step based on current step and zoomStep property.\n   * If we are zoomed all the way in -> return to initialzoom\n   *\n   * @returns {*}\n   */\n  _getNextZoomStep() {\n    const { zoomStep, maxZoom, initialZoom } = this.props;\n    const { zoomLevel } = this;\n\n    if (zoomLevel.toFixed(2) === maxZoom.toFixed(2)) {\n      return initialZoom;\n    }\n\n    const nextZoomStep = zoomLevel * (1 + zoomStep);\n    if (nextZoomStep > maxZoom) {\n      return maxZoom;\n    }\n\n    return nextZoomStep;\n  }\n\n  /**\n   * Zooms to a specific location in our view\n   *\n   * @param x\n   * @param y\n   * @param newZoomLevel\n   *\n   * @private\n   */\n  async _zoomToLocation(x: number, y: number, newZoomLevel: number) {\n    if (!this.props.zoomEnabled) return;\n\n    this.props.onZoomBefore?.(null, null, this._getZoomableViewEventObject());\n\n    // == Perform Zoom Animation ==\n    // Calculates panAnim values based on changes in zoomAnim.\n    let prevScale = this.zoomLevel;\n    // Since zoomAnim is calculated in native driver,\n    //  it will jitter panAnim once in a while,\n    //  because here panAnim is being calculated in js.\n    // However the jittering should mostly occur in simulator.\n    const listenerId = this.zoomAnim.addListener(({ value: newScale }) => {\n      this.panAnim.setValue({\n        x: calcNewScaledOffsetForZoomCentering(\n          this.offsetX,\n          this.state.originalWidth,\n          prevScale,\n          newScale,\n          x\n        ),\n        y: calcNewScaledOffsetForZoomCentering(\n          this.offsetY,\n          this.state.originalHeight,\n          prevScale,\n          newScale,\n          y\n        ),\n      });\n      prevScale = newScale;\n    });\n    getZoomToAnimation(this.zoomAnim, newZoomLevel).start(() => {\n      this.zoomAnim.removeListener(listenerId);\n    });\n    // == Zoom Animation Ends ==\n\n    this.props.onZoomAfter?.(null, null, this._getZoomableViewEventObject());\n  }\n\n  /**\n   * Zooms to a specificied zoom level.\n   * Returns a promise if everything was updated and a boolean, whether it could be updated or if it exceeded the min/max zoom limits.\n   *\n   * @param {number} newZoomLevel\n   *\n   * @return {Promise<bool>}\n   */\n  async zoomTo(newZoomLevel: number): Promise<boolean> {\n    if (\n      // if we would go out of our min/max limits -> abort\n      newZoomLevel > this.props.maxZoom ||\n      newZoomLevel < this.props.minZoom\n    )\n      return false;\n\n    await this._zoomToLocation(0, 0, newZoomLevel);\n    return true;\n  }\n\n  /**\n   * Zooms in or out by a specified change level\n   * Use a positive number for `zoomLevelChange` to zoom in\n   * Use a negative number for `zoomLevelChange` to zoom out\n   *\n   * Returns a promise if everything was updated and a boolean, whether it could be updated or if it exceeded the min/max zoom limits.\n   *\n   * @param {number | null} zoomLevelChange\n   *\n   * @return {Promise<bool>}\n   */\n  zoomBy(zoomLevelChange: number = null): Promise<boolean> {\n    // if no zoom level Change given -> just use zoom step\n    if (!zoomLevelChange) {\n      zoomLevelChange = this.props.zoomStep;\n    }\n\n    return this.zoomTo(this.zoomLevel + zoomLevelChange);\n  }\n\n  /**\n   * Moves the zoomed view to a specified position\n   * Returns a promise when finished\n   *\n   * @param {number} newOffsetX the new position we want to move it to (x-axis)\n   * @param {number} newOffsetY the new position we want to move it to (y-axis)\n   *\n   * @return {Promise<bool>}\n   */\n  moveTo(newOffsetX: number, newOffsetY: number): Promise<void> {\n    const { originalWidth, originalHeight } = this.state;\n\n    const offsetX = (newOffsetX - originalWidth / 2) / this.zoomLevel;\n    const offsetY = (newOffsetY - originalHeight / 2) / this.zoomLevel;\n\n    return this._setNewOffsetPosition(-offsetX, -offsetY);\n  }\n\n  /**\n   * Moves the zoomed view by a certain amount.\n   *\n   * Returns a promise when finished\n   *\n   * @param {number} offsetChangeX the amount we want to move the offset by (x-axis)\n   * @param {number} offsetChangeY the amount we want to move the offset by (y-axis)\n   *\n   * @return {Promise<bool>}\n   */\n  moveBy(offsetChangeX: number, offsetChangeY: number): Promise<void> {\n    const offsetX =\n      (this.offsetX * this.zoomLevel - offsetChangeX) / this.zoomLevel;\n    const offsetY =\n      (this.offsetY * this.zoomLevel - offsetChangeY) / this.zoomLevel;\n\n    return this._setNewOffsetPosition(offsetX, offsetY);\n  }\n\n  render() {\n    return (\n      <View\n        style={styles.container}\n        {...this.gestureHandlers.panHandlers}\n        ref={this.zoomSubjectWrapperRef}\n        onLayout={this.grabZoomSubjectOriginalMeasurements}\n      >\n        <Animated.View\n          style={[\n            styles.zoomSubject,\n            this.props.style,\n            {\n              transform: [\n                { scale: this.zoomAnim },\n                ...this.panAnim.getTranslateTransform(),\n              ],\n            },\n          ]}\n        >\n          {this.props.children}\n        </Animated.View>\n        {this.props.visualTouchFeedbackEnabled &&\n          this.state.touches?.map((touch) => {\n            const animationDuration = this.props.doubleTapDelay;\n            return (\n              <AnimatedTouchFeedback\n                x={touch.x}\n                y={touch.y}\n                key={touch.id}\n                animationDuration={animationDuration}\n                onAnimationDone={() => this._removeTouch(touch)}\n              />\n            );\n          })}\n        {/* For Debugging Only */}\n        {(this.state.debugPoints || []).map(({ x, y }, index) => {\n          return <DebugTouchPoint key={index} x={x} y={y} />;\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  zoomSubject: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n    overflow: 'hidden',\n  },\n});\n\nexport default ReactNativeZoomableView;\n"]}